package controller

import (
	"net/http"

	"github.com/go-chi/chi"

	"ppm/libnvth/internal/database"
	"ppm/libnvth/internal/vulnerability"
	"ppm/libnvth/internal/vulnerability/dao"
	"ppm/libnvth/internal/vulnerability/dto"
	"github.com/go-chi/render"
)

// VulnerabilityController controller
type VulnerabilityController struct {
	interactor vulnerability.Interactor
}

// NewVulnerabilityController initial
func NewVulnerabilityController(session *database.DBSession) VulnerabilityController {
	dao := dao.NewVulnerabilityDAOImpl(session)
	interactor := vulnerability.NewInteractorImpl(dao)
	return VulnerabilityController{interactor}
}

// List list
// func (controller VulnerabilityController) List(w http.ResponseWriter, r *http.Request) {
// 	req := dto.ReqVulnerabilityList{}
// 	resp := controller.interactor.List(req)
// 	render.Status(r, resp.Info.StatusCode)
// 	render.JSON(w, r, resp)
// }

// Get get
func (controller VulnerabilityController) Get(w http.ResponseWriter, r *http.Request) {
	ID := chi.URLParam(r, "vulnerabilityID")
	req := dto.ReqVulnerabilityGet{ID: ID}
	resp := controller.interactor.Get(req)
	render.Status(r, resp.Info.StatusCode)
	render.JSON(w, r, resp)
}

// Create create
func (controller VulnerabilityController) Create(w http.ResponseWriter, r *http.Request) {
	req := dto.ReqVulnerabilityCreate{}
	if err := render.DecodeJSON(r.Body, &req); err != nil {
		render.Status(r, http.StatusBadRequest)
		render.JSON(w, r, err.Error())
		return
	}
	resp := controller.interactor.Create(req)
	render.Status(r, resp.Info.StatusCode)
	render.JSON(w, r, resp)
}

// Update update
func (controller VulnerabilityController) Update(w http.ResponseWriter, r *http.Request) {
	ID := chi.URLParam(r, "vulnerabilityID")
	req := dto.ReqVulnerabilityUpdate{}
	if err := render.DecodeJSON(r.Body, &req); err != nil {
		render.Status(r, http.StatusBadRequest)
		render.JSON(w, r, err.Error())
		return
	}
	req.ID = ID
	resp := controller.interactor.Update(req)
	render.Status(r, resp.Info.StatusCode)
	render.JSON(w, r, resp)
}

// Delete delete
func (controller VulnerabilityController) Delete(w http.ResponseWriter, r *http.Request) {
	ID := chi.URLParam(r, "vulnerabilityID")
	req := dto.ReqVulnerabilityDelete{ID: ID}
	resp := controller.interactor.Delete(req)
	render.Status(r, resp.Info.StatusCode)
	render.JSON(w, r, resp)
}
