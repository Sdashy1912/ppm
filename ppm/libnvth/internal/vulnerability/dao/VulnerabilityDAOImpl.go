package dao

import (
	"ppm/libnvth/internal/database"
	"ppm/libnvth/internal/vulnerability/bean"
	"gopkg.in/mgo.v2/bson"
)

// VulnerabilityDAOImpl implements VulnerabilityDAO
type VulnerabilityDAOImpl struct {
	session *database.DBSession
}

var _ VulnerabilityDAO = (*VulnerabilityDAOImpl)(nil)

// NewVulnerabilityDAOImpl return a new VulnerabilityDAOImpl instance
func NewVulnerabilityDAOImpl(session *database.DBSession) VulnerabilityDAOImpl {
	return VulnerabilityDAOImpl{session}
}

// List select all
// func (dao VulnerabilityDAOImpl) List(param VulnerabilityListDAOParam) ([]bean.VulnerabilityBean, error) {
// 	collection := dao.session.Collection("Vulnerabilitys")
// 	defer collection.Close()
// 	selector := bson.M{}
// 	if param.CategoryID != "" {
// 		selector["category_id"] = param.CategoryID
// 	}
// 	query := collection.Find(selector)
// 	if param.OrderBy != "" {
// 		query.Sort(param.OrderBy)
// 	}
// 	templates := []bean.VulnerabilityBean{}
// 	err := query.All(&templates)
// 	return templates, err
// }

// Get find by id
func (dao VulnerabilityDAOImpl) Get(ID bson.ObjectId) (bean.VulnerabilityBean, error) {
	collection := dao.session.Collection("Targets")
	defer collection.Close()
	template := bean.VulnerabilityBean{}
	pipeline := []bson.M{
		{"$unwind": "$vulnerabilities"},
		{"$match": bson.M{"vulnerabilities._id": ID}},
		{"$addFields": bson.M{"vulnerabilities.target": bson.M{"_id": "$_id", "name": "$name"}}},
		{"$replaceRoot": bson.M{"newRoot": "$vulnerabilities"}},
	}
	err := collection.Pipe(pipeline).One(&template)
	return template, err
}

// Insert persist a new object
func (dao VulnerabilityDAOImpl) Insert(param VulnerabilityDAOParam) error {
	collection := dao.session.Collection("Targets")
	defer collection.Close()
	return collection.UpdateId(param.TargetID, bson.M{"$push": bson.M{"vulnerabilities": param}})
}

// Update change details
func (dao VulnerabilityDAOImpl) Update(param VulnerabilityDAOParam) error {
	collection := dao.session.Collection("Targets")
	defer collection.Close()
	return collection.Update(bson.M{"vulnerabilities._id": param.ID}, bson.M{"$set": bson.M{"vulnerabilities.$": param}})
}

// Remove remove object by id
func (dao VulnerabilityDAOImpl) Remove(ID bson.ObjectId) error {
	collection := dao.session.Collection("Targets")
	defer collection.Close()
	return collection.Update(bson.M{"vulnerabilities._id": ID}, bson.M{"$pull": bson.M{"vulnerabilities": bson.M{"_id": ID}}})
}
