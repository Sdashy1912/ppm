package vulnerability

import (
    "log"
    "time"

    "ppm/libnvth/internal/vulnerability/dao"
    "ppm/libnvth/internal/vulnerability/dto"
    "gopkg.in/mgo.v2/bson"
)

// InteractorImpl implements Interactor
type InteractorImpl struct {
    dao dao.VulnerabilityDAO
}

// NewInteractorImpl initialize a new InteractorImpl object
func NewInteractorImpl(dao dao.VulnerabilityDAO) InteractorImpl {
    return InteractorImpl{dao}
}

var _ Interactor = (*InteractorImpl)(nil)

// // List get a list of vulnerability templates
// func (interactor InteractorImpl) List(req dto.ReqVulnerabilityList) dto.ResVulnerabilityList {
// 	resp := dto.ResVulnerabilityList{}
// 	param := dao.VulnerabilityListDAOParam{
// 		CategoryID: req.CategoryID,
// 		OrderBy:    req.OrderBy,
// 	}
// 	templates, err := interactor.dao.List(param)
// 	if err != nil {
// 		resp.Info.SetStatusInternalServerError()
// 		return resp
// 	}
// 	resp.Templates = templates
// 	resp.Total = len(templates)
// 	resp.Info.SetStatusOK("Ok")
// 	return resp
// }

// Get find a vulnerability template by ID
func (interactor InteractorImpl) Get(req dto.ReqVulnerabilityGet) dto.ResVulnerabilityGet {
    resp := dto.ResVulnerabilityGet{}
    if !bson.IsObjectIdHex(req.ID) {
        resp.Info.SetStatusNotFound()
        return resp
    }
    vul, err := interactor.dao.Get(bson.ObjectIdHex(req.ID))
    if err != nil {
        if err.Error() == "not found" {
            resp.Info.SetStatusNotFound()
        } else {
            log.Printf("WTF: %s", err)
            resp.Info.SetStatusInternalServerError()
        }
        return resp
    }
    resp.Vulnerability = vul
    resp.Info.SetStatusOK("Ok")
    return resp
}

// Create create a new vulnerability template
func (interactor InteractorImpl) Create(req dto.ReqVulnerabilityCreate) dto.ResVulnerabilityCreate {
    resp := dto.ResVulnerabilityCreate{}
    if !bson.IsObjectIdHex(req.TargetID) {
        resp.Info.SetStatusUnprocessableEntity(map[string]string{"target_id": "invalid target id"})
        return resp
    }
    now := time.Now()
    param := dao.VulnerabilityDAOParam{
        ID:              bson.NewObjectId(),
        TemplateID:      req.TemplateID,
        IdentifierName:  req.IdentifierName,
        TargetID:        bson.ObjectIdHex(req.TargetID),
        Rating:          req.Rating,
        Name:            req.Name,
        Overview:        req.Overview,
        DetectionMethod: req.DetectionMethod,
        Description:     req.Description,
        Condition:       req.Condition,
        PossibleImpact:  req.PossibleImpact,
        Countermeasure:  req.Countermeasure,
        Remarks:         req.Remarks,
        PfTargets:       req.PfTargets,
        CreatedAt:       &now,
        LastUpdate:      &now,
    }
    err := interactor.dao.Insert(param)
    if err != nil {
        resp.Info.SetStatusInternalServerError()
        return resp
    }
    resp.InsertedID = param.ID.Hex()
    resp.Info.SetStatusOK("Created")
    return resp
}

// Update update an existing vulnerability template
func (interactor InteractorImpl) Update(req dto.ReqVulnerabilityUpdate) dto.ResVulnerabilityUpdate {
    resp := dto.ResVulnerabilityUpdate{}
    if !bson.IsObjectIdHex(req.ID) {
        resp.Info.SetStatusNotFound()
        return resp
    }
    now := time.Now()
    param := dao.VulnerabilityDAOParam{
        ID:              bson.ObjectIdHex(req.ID),
        TemplateID:      req.TemplateID,
        IdentifierName:  req.IdentifierName,
        Rating:          req.Rating,
        Name:            req.Name,
        Overview:        req.Overview,
        DetectionMethod: req.DetectionMethod,
        Description:     req.Description,
        Condition:       req.Condition,
        PossibleImpact:  req.PossibleImpact,
        Countermeasure:  req.Countermeasure,
        Remarks:         req.Remarks,
        PfTargets:       req.PfTargets,
        CreatedAt:       req.CreatedAt,
        LastUpdate:      &now,
    }
    err := interactor.dao.Update(param)
    if err != nil {
        if err.Error() == "not found" {
            resp.Info.SetStatusNotFound()
        } else {
            resp.Info.SetStatusInternalServerError()
        }
        return resp
    }
    resp.Info.SetStatusOK("Updated")
    return resp
}

// Delete remove an vulnerability template
func (interactor InteractorImpl) Delete(req dto.ReqVulnerabilityDelete) dto.ResVulnerabilityDelete {
    resp := dto.ResVulnerabilityDelete{}
    if !bson.IsObjectIdHex(req.ID) {
        resp.Info.SetStatusNotFound()
        return resp
    }
    _, err := interactor.dao.Get(bson.ObjectIdHex(req.ID))
    if err != nil {
        if err.Error() == "not found" {
            resp.Info.SetStatusNotFound()
        } else {
            log.Printf("Error get: %s", err)
            resp.Info.SetStatusInternalServerError()
        }
        return resp
    }
    err = interactor.dao.Remove(bson.ObjectIdHex(req.ID))
    if err != nil {
        log.Printf("Error removing: %s", err)
        resp.Info.SetStatusInternalServerError()
        return resp
    }
    resp.Info.SetStatusOK("Deleted")
    return resp
}
